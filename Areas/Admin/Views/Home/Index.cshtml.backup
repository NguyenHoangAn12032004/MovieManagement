@using MovieManagement.Areas.Admin.Controllers
@using MovieManagement.Areas.Admin.Models
@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<div class="container-fluid py-4">
    <!-- Revenue Statistics Cards (Following Cinema Industry Standards) -->
    <div class="row g-4 mb-4">
        <div class="col-xl-3 col-sm-6">
            <div class="card border-0 shadow-sm h-100 border-start border-4 border-success">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0 me-3">
                            <div class="avatar avatar-circle bg-success bg-opacity-10 p-3">
                                <i class="fas fa-money-bill-wave fa-2x text-success"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1">
                            <p class="text-muted mb-1 small">T·ªïng Doanh Thu</p>
                            <h3 class="mb-0 fw-bold text-success">@((ViewBag.TotalRevenue ?? 0).ToString("N0")) ‚Ç´</h3>
                            <small class="text-success"><i class="fas fa-arrow-up"></i> +15%</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-sm-6">
            <div class="card border-0 shadow-sm h-100 border-start border-4 border-primary">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0 me-3">
                            <div class="avatar avatar-circle bg-primary bg-opacity-10 p-3">
                                <i class="fas fa-ticket-alt fa-2x text-primary"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1">
                            <p class="text-muted mb-1 small">Doanh Thu V√©</p>
                            <h3 class="mb-0 fw-bold text-primary">@((ViewBag.TicketRevenue ?? 0).ToString("N0")) ‚Ç´</h3>
                            <small class="text-muted">@(((ViewBag.TotalRevenue ?? 0) > 0 ? ((ViewBag.TicketRevenue ?? 0) / (ViewBag.TotalRevenue ?? 1) * 100) : 0).ToString("F1"))% t·ªïng DT</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-sm-6">
            <div class="card border-0 shadow-sm h-100 border-start border-4 border-danger">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0 me-3">
                            <div class="avatar avatar-circle bg-danger bg-opacity-10 p-3">
                                <i class="fas fa-popcorn fa-2x text-danger"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1">
                            <p class="text-muted mb-1 small">Doanh Thu B·∫Øp N∆∞·ªõc</p>
                            <h3 class="mb-0 fw-bold text-danger">@((ViewBag.ConcessionRevenue ?? 0).ToString("N0")) ‚Ç´</h3>
                            <small class="text-muted">@((ViewBag.ConcessionMargin ?? 0).ToString("F1"))% t·ªïng DT</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-sm-6">
            <div class="card border-0 shadow-sm h-100 border-start border-4 border-info">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0 me-3">
                            <div class="avatar avatar-circle bg-info bg-opacity-10 p-3">
                                <i class="fas fa-chart-line fa-2x text-info"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1">
                            <p class="text-muted mb-1 small">T·ª∑ L·ªá Mua K√®m</p>
                            <h3 class="mb-0 fw-bold text-info">@((ViewBag.AttachRate ?? 0).ToString("F1"))%</h3>
                            <small class="text-muted">Kh√°ch mua combo</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Operational Statistics Cards -->
    <div class="row g-4 mb-4">
        <div class="col-xl-3 col-sm-6">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0 me-3">
                            <div class="avatar avatar-circle bg-secondary bg-opacity-10 p-3">
                                <i class="fas fa-ticket-alt fa-2x text-secondary"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1">
                            <p class="text-muted mb-1 small">T·ªïng s·ªë v√© b√°n</p>
                            <h3 class="mb-0 fw-bold">@(ViewBag.TotalBookings ?? 0)</h3>
                            <small class="text-success"><i class="fas fa-arrow-up"></i> +12%</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-sm-6">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0 me-3">
                            <div class="avatar avatar-circle bg-warning bg-opacity-10 p-3">
                                <i class="fas fa-shopping-cart fa-2x text-warning"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1">
                            <p class="text-muted mb-1 small">S·∫£n ph·∫©m b√°n ra</p>
                            <h3 class="mb-0 fw-bold">@(ViewBag.TotalConcessionSold ?? 0)</h3>
                            <small class="text-success"><i class="fas fa-arrow-up"></i> +18%</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-sm-6">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0 me-3">
                            <div class="avatar avatar-circle bg-success bg-opacity-10 p-3">
                                <i class="fas fa-film fa-2x text-success"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1">
                            <p class="text-muted mb-1 small">T·ªïng s·ªë phim</p>
                            <h3 class="mb-0 fw-bold">@(ViewBag.TotalMovies ?? 0)</h3>
                            <small class="text-info"><i class="fas fa-arrow-right"></i> ·ªîn ƒë·ªãnh</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-sm-6">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0 me-3">
                            <div class="avatar avatar-circle bg-info bg-opacity-10 p-3">
                                <i class="fas fa-users fa-2x text-info"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1">
                            <p class="text-muted mb-1 small">Kh√°ch h√†ng</p>
                            <h3 class="mb-0 fw-bold">@(ViewBag.TotalUsers ?? 0)</h3>
                            <small class="text-success"><i class="fas fa-arrow-up"></i> +8%</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Industry Benchmark Information -->
    <div class="row g-4 mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm bg-light">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0 me-3">
                            <i class="fas fa-info-circle fa-2x text-info"></i>
                        </div>
                        <div class="flex-grow-1">
                            <h6 class="mb-2 fw-bold text-dark">üìä Chu·∫©n Ng√†nh R·∫°p Chi·∫øu Phim</h6>
                            <div class="row">
                                <div class="col-md-3">
                                    <small class="text-muted">T·ª∑ l·ªá b·∫Øp n∆∞·ªõc chu·∫©n:</small><br>
                                    <strong class="text-info">25-30%</strong> t·ªïng doanh thu
                                </div>
                                <div class="col-md-3">
                                    <small class="text-muted">Attach rate l√Ω t∆∞·ªüng:</small><br>
                                    <strong class="text-success">60-80%</strong> kh√°ch mua combo
                                </div>
                                <div class="col-md-3">
                                    <small class="text-muted">Hi·ªán t·∫°i c·ªßa b·∫°n:</small><br>
                                    <span class="badge @((ViewBag.ConcessionMargin ?? 0) >= 25 ? "bg-success" : (ViewBag.ConcessionMargin ?? 0) >= 20 ? "bg-warning" : "bg-danger")">
                                        @((ViewBag.ConcessionMargin ?? 0).ToString("F1"))% b·∫Øp n∆∞·ªõc
                                    </span>
                                </div>
                                <div class="col-md-3">
                                    <small class="text-muted">Attach rate:</small><br>
                                    <span class="badge @((ViewBag.AttachRate ?? 0) >= 60 ? "bg-success" : (ViewBag.AttachRate ?? 0) >= 40 ? "bg-warning" : "bg-danger")">
                                        @((ViewBag.AttachRate ?? 0).ToString("F1"))% mua k√®m
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="ms-auto">
                            <a href="/Admin/Concession/Statistics" class="btn btn-sm btn-outline-info me-2">
                                <i class="fas fa-chart-bar"></i> Ph√¢n t√≠ch chi ti·∫øt
                            </a>
                            <a href="@Url.Action("DebugRevenue")" class="btn btn-sm btn-outline-warning">
                                <i class="fas fa-bug"></i> Debug
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts (Optimized & Interactive) -->
    <div class="row g-4">
        <!-- Enhanced Revenue Chart -->
        <div class="col-md-8">
            <div class="card border-0 shadow-sm chart-container" data-chart-type="revenue" id="revenueContainer">
                <div class="card-header bg-gradient-primary border-0 py-2 d-flex justify-content-between align-items-center">
                    <h6 class="card-title mb-0 text-white">
                        <i class="fas fa-chart-area me-2"></i>
                        Doanh thu 7 ng√†y g·∫ßn ƒë√¢y
                    </h6>
                    <div class="btn-group" role="group">
                        <button class="btn btn-sm btn-outline-light" onclick="toggleZoom('revenueChart')" title="Zoom to√†n m√†n h√¨nh">
                            <i class="fas fa-expand-arrows-alt"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-light me-2" onclick="refreshChart('revenueChart')" title="L√†m m·ªõi">
                            <i class="fas fa-sync-alt"></i>
                        </button>
                        <a href="@Url.Action("Analytics")" class="btn btn-sm btn-light" title="Xem chi ti·∫øt">
                            <i class="fas fa-external-link-alt me-1"></i>Chi ti·∫øt
                        </a>
                    </div>
                </div>
                <div class="card-body p-3">
                    <div class="chart-wrapper" id="revenueWrapper">
                        <div class="chart-loading d-none">
                            <div class="text-center py-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">ƒêang t·∫£i...</span>
                                </div>
                                <div class="mt-2 text-muted">ƒêang t·∫£i bi·ªÉu ƒë·ªì...</div>
                            </div>
                        </div>
                        <canvas id="revenueChart" height="180"></canvas>
                    </div>
                    <div class="mt-3 border-top pt-3">
                        <div class="row text-center">
                            <div class="col-4">
                                <div class="border-end">
                                    <span class="text-muted d-block small">T·ªïng 7 ng√†y</span>
                                    <strong class="text-success h6 mb-0">@((ViewBag.TotalRevenue7Days ?? 0).ToString("N0")) ‚Ç´</strong>
                                </div>
                            </div>
                            <div class="col-4">
                                <div class="border-end">
                                    <span class="text-muted d-block small">TB V√©/ng√†y</span>
                                    <strong class="text-primary h6 mb-0">@((ViewBag.AvgTicketRevenue ?? 0).ToString("N0")) ‚Ç´</strong>
                                </div>
                            </div>
                            <div class="col-4">
                                <span class="text-muted d-block small">TB B·∫Øp/ng√†y</span>
                                <strong class="text-danger h6 mb-0">@((ViewBag.AvgConcessionRevenue ?? 0).ToString("N0")) ‚Ç´</strong>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <!-- Enhanced Popular Movies Chart -->
            <div class="card border-0 shadow-sm mb-3 chart-container" data-chart-type="movies" id="movieContainer">
                <div class="card-header bg-gradient-warning border-0 py-2 d-flex justify-content-between align-items-center">
                    <h6 class="card-title mb-0 text-white">
                        <i class="fas fa-trophy me-2"></i>
                        Top 5 Phim Hot
                    </h6>
                    <div class="btn-group" role="group">
                        <button class="btn btn-sm btn-outline-light" onclick="toggleZoom('movieChart')" title="Zoom">
                            <i class="fas fa-expand-arrows-alt"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-light" onclick="refreshChart('movieChart')" title="L√†m m·ªõi">
                            <i class="fas fa-sync-alt"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body p-3">
                    <div class="chart-wrapper" id="movieWrapper">
                        <div class="chart-loading d-none">
                            <div class="text-center py-3">
                                <div class="spinner-border spinner-border-sm text-warning" role="status"></div>
                                <div class="mt-2 text-muted small">ƒêang t·∫£i...</div>
                            </div>
                        </div>
                        <canvas id="movieChart" height="160"></canvas>
                    </div>
                </div>
            </div>
            
            <!-- Enhanced Booking Status Chart -->
            <div class="card border-0 shadow-sm chart-container" data-chart-type="status" id="statusContainer">
                <div class="card-header bg-gradient-info border-0 py-2 d-flex justify-content-between align-items-center">
                    <h6 class="card-title mb-0 text-white">
                        <i class="fas fa-chart-pie me-2"></i>
                        Tr·∫°ng th√°i v√©
                    </h6>
                    <div class="btn-group" role="group">
                        <button class="btn btn-sm btn-outline-light" onclick="toggleZoom('bookingStatusChart')" title="Zoom">
                            <i class="fas fa-expand-arrows-alt"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-light" onclick="refreshChart('bookingStatusChart')" title="L√†m m·ªõi">
                            <i class="fas fa-sync-alt"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body p-3">
                    <div class="chart-wrapper" id="statusWrapper">
                        <div class="chart-loading d-none">
                            <div class="text-center py-3">
                                <div class="spinner-border spinner-border-sm text-info" role="status"></div>
                                <div class="mt-2 text-muted small">ƒêang t·∫£i...</div>
                            </div>
                        </div>
                        <canvas id="bookingStatusChart" height="160"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Zoom Modal -->
    <div id="chartZoomModal" class="chart-zoom-overlay">
        <div class="chart-zoom-content">
            <button class="chart-zoom-close" onclick="closeZoom()">&times;</button>
            <div id="zoomChartContainer"></div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .avatar-circle {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .card {
            transition: all 0.3s ease;
            margin-bottom: 0;
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15) !important;
        }
        
        .card-title {
            text-decoration: none !important;
            border-bottom: none !important;
            font-weight: 500;
        }
        
        /* Gradient headers */
        .bg-gradient-primary {
            background: linear-gradient(135deg, #0d6efd 0%, #0056b3 100%) !important;
        }
        
        .bg-gradient-warning {
            background: linear-gradient(135deg, #ffc107 0%, #ff8500 100%) !important;
        }
        
        .bg-gradient-info {
            background: linear-gradient(135deg, #0dcaf0 0%, #0891b2 100%) !important;
        }

        /* Enhanced Chart Container Styles */
        .chart-container {
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
            border-radius: 12px;
        }

        .chart-container:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 35px rgba(0, 0, 0, 0.2) !important;
        }

        .chart-wrapper {
            position: relative;
            transition: all 0.4s ease;
        }

        .chart-wrapper canvas {
            max-width: 100%;
            height: auto;
            transition: all 0.3s ease;
        }

        /* Loading states */
        .chart-loading {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.9);
            z-index: 10;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Zoom Modal */
        .chart-zoom-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.85);
            z-index: 9999;
            display: none;
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(5px);
        }

        .chart-zoom-content {
            background: white;
            border-radius: 16px;
            padding: 30px;
            max-width: 95%;
            max-height: 95%;
            overflow: auto;
            position: relative;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
            animation: zoomIn 0.3s ease-out;
        }

        @@keyframes zoomIn {
            from {
                opacity: 0;
                transform: scale(0.8);
            }
            to {
                opacity: 1;
                transform: scale(1);
            }
        }

        .chart-zoom-close {
            position: absolute;
            top: 15px;
            right: 20px;
            background: none;
            border: none;
            font-size: 28px;
            cursor: pointer;
            color: #666;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.2s ease;
        }

        .chart-zoom-close:hover {
            background: #f8f9fa;
            color: #000;
        }

        /* Interactive hover effects */
        .chart-container[data-chart-type="revenue"]:hover {
            border-left: 4px solid #28a745;
        }

        .chart-container[data-chart-type="movies"]:hover {
            border-left: 4px solid #ffc107;
        }

        .chart-container[data-chart-type="status"]:hover {
            border-left: 4px solid #17a2b8;
        }

        /* Responsive optimizations */
        @@media (max-width: 768px) {
            .chart-container {
                margin-bottom: 1rem;
            }
            
            .card-body.p-3 {
                padding: 1rem !important;
            }
            
            .btn-group .btn {
                padding: 0.25rem 0.5rem;
                font-size: 0.875rem;
            }
            
            .chart-zoom-content {
                padding: 20px;
                max-width: 98%;
                max-height: 98%;
            }
        }

        /* Performance optimizations */
        .chart-container canvas {
            will-change: transform;
        }

        /* Button group styling */
        .btn-group .btn-sm {
            padding: 0.25rem 0.6rem;
            font-size: 0.8rem;
            border-radius: 0.25rem;
        }

        /* Smooth transitions for all interactive elements */
        .btn, .card, .chart-wrapper, .chart-container {
            will-change: transform;
        }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    <script>
        // Check if Chart.js loaded successfully
        if (typeof Chart === 'undefined') {
            console.error('Chart.js failed to load from CDN');
            // Show error message to user
            document.addEventListener('DOMContentLoaded', function() {
                document.querySelectorAll('.chart-wrapper').forEach(wrapper => {
                    wrapper.innerHTML = '<div class="alert alert-danger text-center"><i class="fas fa-exclamation-triangle"></i><br>Kh√¥ng th·ªÉ t·∫£i th∆∞ vi·ªán bi·ªÉu ƒë·ªì<br><small class="text-muted">Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng</small></div>';
                });
            });
        } else {
            console.log('Chart.js loaded successfully, version:', Chart.version);
            
            // Performance optimized chart configuration
            Chart.defaults.animation.duration = 600; // Reduced animation time
            Chart.defaults.elements.point.radius = 3;
            Chart.defaults.elements.point.hoverRadius = 5;
            Chart.defaults.responsive = true;
            Chart.defaults.maintainAspectRatio = false;

            // Data validation and initialization
            const chartData = {
                revenueLabels: @Html.Raw(Json.Serialize(ViewBag.RevenueLabels ?? new List<string>())),
                revenueData: @Html.Raw(Json.Serialize(ViewBag.RevenueData ?? new List<decimal>())),
                ticketRevenueData: @Html.Raw(Json.Serialize(ViewBag.TicketRevenueData ?? new List<decimal>())),
                concessionRevenueData: @Html.Raw(Json.Serialize(ViewBag.ConcessionRevenueData ?? new List<decimal>())),
                movieLabels: @Html.Raw(Json.Serialize(ViewBag.PopularMovieLabels ?? new List<string>())),
                movieData: @Html.Raw(Json.Serialize(ViewBag.PopularMovieData ?? new List<int>())),
                bookingStatusData: @Html.Raw(Json.Serialize(ViewBag.BookingStatusData ?? new int[] {0, 0, 0}))
            };

        // Debug: Log chart data to console
        console.log('Chart Data Debug:', chartData);
        console.log('Revenue Labels:', chartData.revenueLabels);
        console.log('Revenue Data:', chartData.revenueData);
        console.log('Movie Labels:', chartData.movieLabels);
        console.log('Movie Data:', chartData.movieData);
        console.log('Booking Status Data:', chartData.bookingStatusData);

        // Chart instances storage with lazy loading
        const chartInstances = {};
        const chartConfigs = {};

        // Optimized color schemes
        const colorSchemes = {
            revenue: {
                total: { border: '#28a745', background: 'rgba(40, 167, 69, 0.1)' },
                ticket: { border: '#007bff', background: 'rgba(0, 123, 255, 0.1)' },
                concession: { border: '#dc3545', background: 'rgba(220, 53, 69, 0.1)' }
            },
            movies: ['#0d6efd', '#198754', '#ffc107', '#dc3545', '#6c757d', '#20c997', '#fd7e14'],
            status: ['#198754', '#ffc107', '#dc3545']
        };

        // Common optimized chart options
        const getCommonOptions = (type) => ({
            responsive: true,
            maintainAspectRatio: false,
            interaction: {
                intersect: false,
                mode: 'index'
            },
            plugins: {
                legend: {
                    display: true,
                    position: type === 'line' ? 'top' : 'bottom',
                    labels: {
                        usePointStyle: true,
                        padding: type === 'line' ? 15 : 10,
                        font: { size: type === 'line' ? 11 : 10 },
                        boxWidth: type === 'line' ? 15 : 12
                    }
                },
                tooltip: {
                    backgroundColor: 'rgba(0, 0, 0, 0.85)',
                    titleColor: '#fff',
                    bodyColor: '#fff',
                    cornerRadius: 8,
                    displayColors: true,
                    callbacks: {
                        label: function(context) {
                            const label = context.dataset.label || '';
                            const value = context.parsed.y !== undefined ? context.parsed.y : context.parsed;
                            return `${label}: ${value.toLocaleString('vi-VN')} ${type === 'revenue' ? '‚Ç´' : (type === 'status' ? 'v√©' : '')}`;
                        }
                    }
                }
            }
        });

        // Initialize charts with lazy loading
        function initializeCharts() {
            console.log('Initializing charts...');
            
            // Validate and provide fallback data
            if (!chartData.revenueLabels || chartData.revenueLabels.length === 0) {
                console.warn('No revenue data found, using fallback data');
                chartData.revenueLabels = ['Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7', 'CN'];
                chartData.revenueData = [100000, 150000, 200000, 175000, 250000, 300000, 280000];
                chartData.ticketRevenueData = [60000, 90000, 120000, 105000, 150000, 180000, 168000];
                chartData.concessionRevenueData = [40000, 60000, 80000, 70000, 100000, 120000, 112000];
            }
            
            if (!chartData.movieLabels || chartData.movieLabels.length === 0) {
                console.warn('No movie data found, using fallback data');
                chartData.movieLabels = ['Avengers', 'Spider-Man', 'Batman', 'Superman', 'Iron Man'];
                chartData.movieData = [45, 35, 25, 20, 15];
            }
            
            if (!chartData.bookingStatusData || chartData.bookingStatusData.length === 0) {
                console.warn('No booking status data found, using fallback data');
                chartData.bookingStatusData = [80, 15, 5];
            }
            // Revenue Chart Configuration
            if (chartData.revenueLabels.length > 0) {
                chartConfigs.revenueChart = {
                    type: 'line',
                    data: {
                        labels: chartData.revenueLabels,
                        datasets: [
                            {
                                label: 'T·ªïng doanh thu',
                                data: chartData.revenueData,
                                borderColor: colorSchemes.revenue.total.border,
                                backgroundColor: colorSchemes.revenue.total.background,
                                tension: 0.4,
                                fill: true,
                                borderWidth: 3,
                                pointRadius: 4,
                                pointHoverRadius: 6
                            },
                            {
                                label: 'Doanh thu v√©',
                                data: chartData.ticketRevenueData,
                                borderColor: colorSchemes.revenue.ticket.border,
                                backgroundColor: colorSchemes.revenue.ticket.background,
                                tension: 0.4,
                                fill: false,
                                borderWidth: 2,
                                pointRadius: 3
                            },
                            {
                                label: 'Doanh thu b·∫Øp n∆∞·ªõc',
                                data: chartData.concessionRevenueData,
                                borderColor: colorSchemes.revenue.concession.border,
                                backgroundColor: colorSchemes.revenue.concession.background,
                                tension: 0.4,
                                fill: false,
                                borderWidth: 2,
                                pointRadius: 3
                            }
                        ]
                    },
                    options: {
                        ...getCommonOptions('line'),
                        scales: {
                            x: {
                                grid: { display: false },
                                ticks: { font: { size: 10 } }
                            },
                            y: {
                                beginAtZero: true,
                                grid: { color: 'rgba(0, 0, 0, 0.05)' },
                                ticks: {
                                    font: { size: 10 },
                                    callback: function(value) {
                                        return (value / 1000).toFixed(0) + 'K ‚Ç´';
                                    }
                                }
                            }
                        }
                    }
                };
            }

            // Movies Chart Configuration
            if (chartData.movieLabels.length > 0) {
                chartConfigs.movieChart = {
                    type: 'doughnut',
                    data: {
                        labels: chartData.movieLabels.map(label => 
                            label.length > 15 ? label.substring(0, 15) + '...' : label
                        ),
                        datasets: [{
                            data: chartData.movieData,
                            backgroundColor: colorSchemes.movies.slice(0, chartData.movieData.length),
                            borderWidth: 2,
                            borderColor: '#fff'
                        }]
                    },
                    options: {
                        ...getCommonOptions('doughnut'),
                        cutout: '65%'
                    }
                };
            }

            // Booking Status Chart Configuration
            if (chartData.bookingStatusData.length > 0) {
                chartConfigs.bookingStatusChart = {
                    type: 'doughnut',
                    data: {
                        labels: ['ƒê√£ thanh to√°n', 'Ch·ªù thanh to√°n', 'ƒê√£ h·ªßy'],
                        datasets: [{
                            data: chartData.bookingStatusData,
                            backgroundColor: colorSchemes.status,
                            borderWidth: 2,
                            borderColor: '#fff'
                        }]
                    },
                    options: {
                        ...getCommonOptions('status'),
                        cutout: '70%'
                    }
                };
            }

            // Create charts with error handling
            Object.keys(chartConfigs).forEach(chartId => {
                createChart(chartId);
            });
        }

        // Create individual chart with error handling
        function createChart(chartId) {
            try {
                const ctx = document.getElementById(chartId);
                if (!ctx) {
                    console.error(`Canvas element not found: ${chartId}`);
                    return;
                }

                console.log(`Creating chart: ${chartId}`);
                
                // Show loading
                showChartLoading(chartId);

                // Verify chart config exists
                if (!chartConfigs[chartId]) {
                    console.error(`Chart config not found for: ${chartId}`);
                    hideChartLoading(chartId);
                    return;
                }

                // Create chart with delay for smooth loading
                setTimeout(() => {
                    try {
                        chartInstances[chartId] = new Chart(ctx, chartConfigs[chartId]);
                        hideChartLoading(chartId);
                        console.log(`Chart created successfully: ${chartId}`);
                    } catch (chartError) {
                        console.error(`Error creating Chart.js instance for ${chartId}:`, chartError);
                        hideChartLoading(chartId);
                        
                        // Show error message in chart container
                        const wrapper = ctx.closest('.chart-wrapper');
                        if (wrapper) {
                            wrapper.innerHTML = `<div class="alert alert-warning text-center">
                                <i class="fas fa-exclamation-triangle"></i><br>
                                Kh√¥ng th·ªÉ t·∫£i bi·ªÉu ƒë·ªì<br>
                                <small class="text-muted">${chartError.message}</small>
                            </div>`;
                        }
                    }
                }, 100);
            } catch (error) {
                console.error(`Error in createChart function for ${chartId}:`, error);
                hideChartLoading(chartId);
            }
        }

        // Loading state management
        function showChartLoading(chartId) {
            const wrapper = document.querySelector(`#${chartId}`).closest('.chart-wrapper');
            const loading = wrapper.querySelector('.chart-loading');
            if (loading) {
                loading.classList.remove('d-none');
            }
        }

        function hideChartLoading(chartId) {
            const wrapper = document.querySelector(`#${chartId}`).closest('.chart-wrapper');
            const loading = wrapper.querySelector('.chart-loading');
            if (loading) {
                loading.classList.add('d-none');
            }
        }

        // Enhanced zoom functionality
        function toggleZoom(chartId) {
            const chart = chartInstances[chartId];
            if (!chart) return;

            const modal = document.getElementById('chartZoomModal');
            const container = document.getElementById('zoomChartContainer');
            
            // Create zoomed chart
            const canvas = document.createElement('canvas');
            canvas.style.width = '800px';
            canvas.style.height = '500px';
            
            container.innerHTML = '';
            container.appendChild(canvas);
            
            // Clone chart config for zoom
            const zoomConfig = JSON.parse(JSON.stringify(chartConfigs[chartId]));
            zoomConfig.options.plugins.legend.labels.font.size = 14;
            
            // Create zoomed chart
            new Chart(canvas, zoomConfig);
            
            // Show modal
            modal.style.display = 'flex';
            document.body.style.overflow = 'hidden';
        }

        // Close zoom modal
        function closeZoom() {
            const modal = document.getElementById('chartZoomModal');
            modal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }

        // Refresh chart data
        function refreshChart(chartId) {
            const chart = chartInstances[chartId];
            if (!chart) return;

            showChartLoading(chartId);
            
            // Simulate data refresh (in real app, fetch from server)
            setTimeout(() => {
                chart.update('active');
                hideChartLoading(chartId);
            }, 500);
        }

        // Enhanced resize handler with debouncing
        let resizeTimeout;
        function handleResize() {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
                Object.values(chartInstances).forEach(chart => {
                    if (chart && typeof chart.resize === 'function') {
                        chart.resize();
                    }
                });
            }, 150);
        }

        // Event listeners
        window.addEventListener('resize', handleResize);
        
        // Close zoom on escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeZoom();
            }
        });

        // Click outside to close zoom
        document.getElementById('chartZoomModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeZoom();
            }
        });

        // Enhanced chart container interactions
        document.querySelectorAll('.chart-container').forEach(container => {
            container.addEventListener('click', function(e) {
                // Don't trigger navigation on button clicks
                if (e.target.closest('button') || e.target.closest('a')) {
                    return;
                }
                
                // Add visual feedback
                this.style.transform = 'scale(0.98)';
                setTimeout(() => {
                    this.style.transform = '';
                    // Navigate to analytics
                    window.location.href = '@Url.Action("Analytics")';
                }, 150);
            });
        });

        // Initialize everything when DOM is ready
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded');
            
            // Check if Chart.js is available
            if (typeof Chart === 'undefined') {
                console.error('Chart.js not available!');
                return;
            }
            
            console.log('Chart.js available, version:', Chart.version);
            
            // Add loading animation
            document.querySelectorAll('.chart-loading').forEach(loading => {
                loading.classList.remove('d-none');
            });
            
            // Test chart creation with simple example first
            setTimeout(function() {
                console.log('Testing simple chart creation...');
                const testCanvas = document.createElement('canvas');
                testCanvas.id = 'simpleTest';
                testCanvas.width = 100;
                testCanvas.height = 100;
                document.body.appendChild(testCanvas);
                
                try {
                    const testChart = new Chart(testCanvas, {
                        type: 'line',
                        data: {
                            labels: ['A', 'B'],
                            datasets: [{
                                data: [1, 2],
                                borderColor: 'red'
                            }]
                        },
                        options: {
                            responsive: false,
                            plugins: {
                                legend: { display: false }
                            }
                        }
                    });
                    console.log('Simple test chart created successfully');
                    testChart.destroy();
                    document.body.removeChild(testCanvas);
                    
                    // If test chart works, initialize main charts
                    initializeCharts();
                } catch (testError) {
                    console.error('Simple test chart failed:', testError);
                }
            }, 500);
        });

        // Performance monitoring (development only)
        if (window.location.hostname === 'localhost') {
            console.log('Dashboard charts initialized with performance optimizations');
        }
        
        } // End of Chart.js loaded check
    </script>
} 