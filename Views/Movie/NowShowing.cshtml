@model List<Movie>
@{
    ViewData["Title"] = "Phim Đang Chiếu";
    
    // Helper function để xử lý genre names
    string GetGenreNamesForFilter(string genreNames)
    {
        if (string.IsNullOrEmpty(genreNames)) return "";
        
        try 
        {
            // Kiểm tra nếu là JSON
            if (genreNames.StartsWith("[") && genreNames.EndsWith("]"))
            {
                var genres = System.Text.Json.JsonSerializer.Deserialize<string[]>(genreNames);
                return string.Join(",", genres?.Select(g => g.ToLower()) ?? new string[0]).Replace("\"", "");
            }
            else
            {
                // Đã là string bình thường
                return genreNames.ToLower().Replace(",", " ");
            }
        }
        catch 
        {
            // Fallback nếu JSON không parse được
            return genreNames.ToLower()
                .Replace("[", "").Replace("]", "").Replace("\"", "")
                .Replace("\\u", "").Replace("00E0", "à").Replace("1EE9", "ũ")
                .Replace("00EA", "ê").Replace("1ED1", "ố").Replace("1ECF", "ỏ")
                .Replace("1EB7", "ặ").Replace("1EBF", "ế").Replace("1ED9", "ộ")
                .Replace(",", " ");
        }
    }
    
    // Helper function để hiển thị genre names
    string GetGenreNamesForDisplay(string genreNames)
    {
        if (string.IsNullOrEmpty(genreNames)) return "Chưa phân loại";
        
        try 
        {
            // Kiểm tra nếu là JSON
            if (genreNames.StartsWith("[") && genreNames.EndsWith("]"))
            {
                var genres = System.Text.Json.JsonSerializer.Deserialize<string[]>(genreNames);
                return string.Join(", ", genres ?? new string[0]);
            }
            else
            {
                // Đã là string bình thường
                return genreNames;
            }
        }
        catch 
        {
            // Fallback để hiển thị
            return genreNames.Replace("[", "").Replace("]", "").Replace("\"", "");
        }
    }
}

@section Styles {
    <style>
        .now-showing-hero {
            background-color: #0a0a0a;
            padding: 0;
            margin: 0;
            position: relative;
            overflow: hidden;
            min-height: 100vh;
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .hero-background {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-image: url('https://image.tmdb.org/t/p/original/628Dep6AxEtDxjZoGP78TsOxYbK.jpg');
            background-size: cover;
            background-position: center;
            filter: blur(3px) brightness(0.3);
            transform: scale(1.1);
            animation: slowZoom 30s infinite alternate;
            width: 100vw;
            height: 100vh;
        }

        @@keyframes slowZoom {
            from {
                transform: scale(1.1);
            }

            to {
                transform: scale(1.2);
            }
        }

        .hero-particles {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
        }

        .hero-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(0, 0, 0, 0.95) 0%, rgba(0, 0, 0, 0.8) 50%, rgba(0, 0, 0, 0.95) 100%);
            z-index: 1;
        }

        .hero-content {
            position: relative;
            z-index: 2;
            padding: 0;
            width: 100%;
            height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .hero-header {
            margin-bottom: 4rem;
        }

        .hero-icon {
            color: #fff;
            margin-bottom: 2rem;
            opacity: 0.9;
        }

            .hero-icon i {
                filter: drop-shadow(0 0 20px rgba(255,255,255,0.3));
            }

        .hero-title {
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
            letter-spacing: -1px;
            font-size: 4rem;
            background: linear-gradient(45deg, #fff, #f0f0f0);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));
        }

        .hero-subtitle {
            text-shadow: 0 1px 2px rgba(0,0,0,0.3);
            max-width: 700px;
            margin-left: auto;
            margin-right: auto;
            font-size: 1.3rem;
            color: rgba(255,255,255,0.9);
            font-weight: 300;
        }

        .search-wrapper {
            margin: 0 20px;
        }

        .search-container {
            position: relative;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 30px;
            padding: 5px 20px;
            display: flex;
            align-items: center;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
        }

            .search-container:hover,
            .search-container:focus-within {
                background: rgba(255, 255, 255, 0.15);
                border-color: rgba(255, 255, 255, 0.3);
                box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
            }

        .search-icon {
            color: rgba(255, 255, 255, 0.7);
            font-size: 1.2rem;
            margin-right: 10px;
            transition: color 0.3s ease;
        }

        .search-input {
            background: transparent;
            border: none;
            color: #fff;
            font-size: 1.1rem;
            padding: 12px 0;
            width: 100%;
            outline: none;
        }

            .search-input::placeholder {
                color: rgba(255, 255, 255, 0.6);
                font-weight: 300;
            }

            .search-input:focus {
                outline: none;
                box-shadow: none;
            }

        .search-clear-btn {
            background: none;
            border: none;
            color: rgba(255, 255, 255, 0.7);
            font-size: 1rem;
            padding: 5px;
            cursor: pointer;
            transition: color 0.3s ease;
            border-radius: 50%;
        }

            .search-clear-btn:hover {
                color: #fff;
                background: rgba(255, 255, 255, 0.1);
            }

        .search-suggestions {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(15px);
            border-radius: 15px;
            margin-top: 10px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
            z-index: 1000;
            max-height: 300px;
            overflow-y: auto;
        }

        .suggestion-item {
            padding: 12px 20px;
            cursor: pointer;
            color: #333;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            transition: background 0.2s ease;
        }

            .suggestion-item:hover {
                background: rgba(40, 167, 69, 0.1);
            }

            .suggestion-item:last-child {
                border-bottom: none;
            }

        .suggestion-type {
            font-size: 0.8rem;
            color: #666;
            margin-left: 5px;
        }

        .filter-counter {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #dc3545;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 0.7rem;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }

        .no-results {
            text-align: center;
            padding: 50px 20px;
            color: rgba(255, 255, 255, 0.7);
        }

            .no-results i {
                font-size: 3rem;
                margin-bottom: 20px;
                opacity: 0.5;
            }

            /* Ẩn icon tìm kiếm mặc định của trình duyệt */
            input[type="search"]::-webkit-search-decoration,
            input[type="search"]::-webkit-search-cancel-button,
            input[type="search"]::-webkit-search-results-button,
            input[type="search"]::-webkit-search-results-decoration,
            input[type="text"]::-ms-clear {
                display: none;
            }

        .filter-tags {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 15px;
            margin-top: 4rem;
        }

        .filter-btn {
            transition: all 0.3s ease;
            border-width: 2px;
            font-weight: 500;
            padding: 12px 30px;
            font-size: 1.1rem;
            position: relative;
            overflow: hidden;
        }

            .filter-btn::before {
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: linear-gradient( 120deg, transparent, rgba(255, 255, 255, 0.2), transparent );
                transition: all 0.5s ease;
            }

            .filter-btn:hover::before {
                left: 100%;
            }

            .filter-btn:hover {
                background-color: rgba(255, 255, 255, 0.1);
                color: #fff;
                transform: translateY(-3px);
                box-shadow: 0 10px 20px rgba(0,0,0,0.3);
            }

            .filter-btn.active {
                background-color: #fff;
                color: #28a745;
                transform: translateY(-3px);
                box-shadow: 0 10px 20px rgba(0,0,0,0.3);
            }

        .movie-card {
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.02);
            border-radius: 1rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            overflow: hidden;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.05);
        }

            .movie-card:hover {
                transform: translateY(-10px) scale(1.02);
                box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            }

        .movie-poster-container {
            aspect-ratio: 2/3;
            background: #141414;
        }

        .movie-poster {
            height: 100%;
            object-fit: cover;
            transition: transform 0.5s ease;
        }

        .movie-card:hover .movie-poster {
            transform: scale(1.1);
        }

        .movie-overlay {
            background: linear-gradient(to bottom, rgba(0,0,0,0.8) 0%, rgba(0,0,0,0.4) 50%, rgba(0,0,0,0.9) 100%);
            opacity: 0;
            transition: all 0.4s ease;
        }

        .movie-card:hover .movie-overlay {
            opacity: 1;
        }

        .movie-actions {
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.3s ease;
        }

        .movie-card:hover .movie-actions {
            opacity: 1;
            transform: translateY(0);
        }

        .btn-hover-effect {
            transition: all 0.3s ease;
        }

            .btn-hover-effect:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            }

        .glass-effect {
            background: rgba(255, 255, 255, 0.98);
            backdrop-filter: blur(10px);
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }

        @@media (max-width: 768px) {
            .now-showing-hero {
                padding: 100px 0 80px;
            }

            .hero-title {
                font-size: 2.5rem;
            }

            .hero-subtitle {
                font-size: 1.1rem;
                padding: 0 20px;
            }

            .search-container {
                padding: 3px 15px;
            }

            .search-input {
                font-size: 1rem;
                padding: 10px 0;
            }

            .search-icon {
                font-size: 1rem;
            }

            .filter-tags {
                padding: 0 20px;
                gap: 10px;
            }

            .filter-btn {
                padding: 8px 20px;
                font-size: 0.9rem;
            }
        }
    </style>
}

<!-- Hero Section -->
<div class="now-showing-hero position-relative overflow-hidden">
    <div class="hero-background"></div>
    <div class="hero-overlay"></div>
    <div class="hero-particles" id="particles-js"></div>
    <div class="container position-relative py-5">
        <div class="hero-content text-center text-white py-5">
            <div class="hero-header mb-4">
                <div class="hero-icon animate__animated animate__fadeIn animate__delay-1s">
                    <i class="fas fa-film fa-3x mb-3"></i>
                </div>
                <h1 class="hero-title display-3 fw-bold mb-3 animate__animated animate__fadeInDown">
                    Phim Đang Chiếu
                </h1>
                <p class="hero-subtitle lead mb-4 animate__animated animate__fadeInUp animate__delay-1s">
                    Khám phá những bộ phim hấp dẫn đang được chiếu tại rạp của chúng tôi
                </p>
            </div>
            <div class="hero-search animate__animated animate__fadeInUp animate__delay-2s">
                <div class="search-wrapper mx-auto" style="max-width: 600px;">
                    <div class="search-container">
                        <i class="fas fa-search search-icon"></i>
                        <input type="text" class="search-input" placeholder="Tìm kiếm phim theo tên, thể loại, diễn viên..." id="movieSearch" autocomplete="off">
                        <button class="search-clear-btn" id="searchClearBtn" style="display: none;">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="search-suggestions" id="searchSuggestions" style="display: none;"></div>
                </div>
            </div>
            <div class="filter-tags mt-5 animate__animated animate__fadeInUp animate__delay-3s">
                <button class="btn btn-outline-light btn-lg rounded-pill me-3 mb-3 filter-btn active" data-filter="all">
                    <i class="fas fa-border-all me-2"></i>Tất cả
                    <span class="filter-counter" id="allCounter" style="display: none;"></span>
                </button>
                <button class="btn btn-outline-light btn-lg rounded-pill me-3 mb-3 filter-btn" data-filter="action">
                    <i class="fas fa-running me-2"></i>Hành động
                    <span class="filter-counter" id="actionCounter" style="display: none;"></span>
                </button>
                <button class="btn btn-outline-light btn-lg rounded-pill me-3 mb-3 filter-btn" data-filter="comedy">
                    <i class="fas fa-laugh me-2"></i>Hài
                    <span class="filter-counter" id="comedyCounter" style="display: none;"></span>
                </button>
                <button class="btn btn-outline-light btn-lg rounded-pill me-3 mb-3 filter-btn" data-filter="drama">
                    <i class="fas fa-theater-masks me-2"></i>Tâm lý
                    <span class="filter-counter" id="dramaCounter" style="display: none;"></span>
                </button>
                <button class="btn btn-outline-light btn-lg rounded-pill me-3 mb-3 filter-btn" data-filter="horror">
                    <i class="fas fa-ghost me-2"></i>Kinh dị
                    <span class="filter-counter" id="horrorCounter" style="display: none;"></span>
                </button>
                <button class="btn btn-outline-light btn-lg rounded-pill me-3 mb-3 filter-btn" data-filter="romance">
                    <i class="fas fa-heart me-2"></i>Lãng mạn
                    <span class="filter-counter" id="romanceCounter" style="display: none;"></span>
                </button>
                <button class="btn btn-outline-light btn-lg rounded-pill me-3 mb-3 filter-btn" data-filter="science fiction">
                    <i class="fas fa-robot me-2"></i>Khoa học viễn tưởng
                    <span class="filter-counter" id="scifiCounter" style="display: none;"></span>
                </button>
            </div>
        </div>
    </div>
</div>

<div class="container my-5">
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4" id="movieGrid">
        @foreach (var movie in Model)
        {
            <div class="col movie-item" 
                 data-genres="@GetGenreNamesForFilter(movie.GenreNames)" 
                 data-genre-ids="@movie.GenreIds"
                 data-title="@movie.Title.ToLower()"
                 data-overview="@movie.Overview.ToLower()"
                 data-cast="@movie.Cast.ToLower()"
                 data-director="@movie.Director.ToLower()"
                 data-rating="@movie.VoteAverage"
                 data-duration="@movie.Duration">
                <div class="movie-card h-100">
                    <div class="movie-poster-container position-relative overflow-hidden rounded-top">
                        @if (movie.PosterPath.StartsWith("/images/placeholder"))
                        {
                            <div class="movie-poster-placeholder d-flex align-items-center justify-content-center">
                                <i class="fas fa-film fa-3x mb-2"></i>
                                <span class="text-center px-3">@movie.Title</span>
                            </div>
                        }
                        else
                        {
                            <img src="@(movie.PosterPath.StartsWith("http") ? movie.PosterPath :
                                      movie.PosterPath.StartsWith("/") ? movie.PosterPath :
                                      $"https://image.tmdb.org/t/p/w500/{movie.PosterPath}")"
                                 alt="@movie.Title"
                                 class="movie-poster w-100"
                                 onerror="this.src='/images/default-movie-poster.jpg'">
                        }
                        <div class="movie-overlay position-absolute top-0 start-0 w-100 h-100 d-flex flex-column justify-content-between p-3">
                            <div class="d-flex justify-content-between align-items-start">
                                <div class="movie-rating bg-dark bg-opacity-75 rounded-pill px-3 py-1 text-white">
                                    <i class="fas fa-star text-warning"></i>
                                    <span class="ms-1">@movie.VoteAverage.ToString("0.0")</span>
                                </div>
                            </div>
                            <div class="movie-actions d-flex flex-column gap-2">
                                <a asp-controller="Movie" asp-action="Details" asp-route-id="@movie.Id"
                                   class="btn btn-light btn-sm rounded-pill btn-hover-effect">
                                    <i class="fas fa-info-circle me-1"></i>Chi Tiết
                                </a>
                                <a asp-controller="Booking" asp-action="Index" asp-route-movieId="@movie.Id"
                                   class="btn btn-primary btn-sm rounded-pill btn-hover-effect">
                                    <i class="fas fa-ticket-alt me-1"></i>Mua Vé
                                </a>
                            </div>
                        </div>
                    </div>
                    <div class="movie-info p-3 glass-effect">
                        <h5 class="movie-title h5 mb-2 text-truncate">@movie.Title</h5>
                        <div class="movie-meta d-flex align-items-center mb-2 gap-3">
                            <span class="movie-duration text-muted">
                                <i class="far fa-clock me-1"></i>@movie.Duration phút
                            </span>
                            <span class="movie-rating-small text-warning">
                                <i class="fas fa-star me-1"></i>@movie.VoteAverage.ToString("0.0")
                            </span>
                        </div>
                        <div class="movie-genres small text-primary mb-1">
                            <i class="fas fa-tags me-1"></i>
                            @GetGenreNamesForDisplay(movie.GenreNames)
                        </div>
                        <div class="movie-description small text-muted mb-0">
                            @(movie.Overview.Length > 100 ? movie.Overview.Substring(0, 100) + "..." : movie.Overview)
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (!Model.Any())
    {
        <div class="text-center py-5">
            <div class="empty-state">
                <i class="fas fa-film fa-4x text-muted mb-3"></i>
                <h3>Không có phim đang chiếu</h3>
                <p class="text-muted">Hiện tại không có phim nào đang chiếu. Vui lòng quay lại sau.</p>
                <a href="/" class="btn btn-primary rounded-pill mt-3">
                    <i class="fas fa-home me-1"></i>Về Trang Chủ
                </a>
            </div>
        </div>
    }
    
    <!-- No results message -->
    <div class="no-results" id="noResults" style="display: none;">
        <i class="fas fa-search"></i>
        <h4>Không tìm thấy phim nào</h4>
        <p>Thử tìm kiếm với từ khóa khác hoặc chọn thể loại khác</p>
    </div>
</div>

@section Scripts {
    <!-- Add particles.js -->
    <script src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize particles.js
            particlesJS('particles-js', {
                particles: {
                    number: { value: 80, density: { enable: true, value_area: 800 } },
                    color: { value: '#ffffff' },
                    shape: { type: 'circle' },
                    opacity: { value: 0.5, random: true },
                    size: { value: 3, random: true },
                    line_linked: {
                        enable: true,
                        distance: 150,
                        color: '#ffffff',
                        opacity: 0.2,
                        width: 1
                    },
                    move: {
                        enable: true,
                        speed: 2,
                        direction: 'none',
                        random: true,
                        straight: false,
                        out_mode: 'out',
                        bounce: false
                    }
                },
                interactivity: {
                    detect_on: 'canvas',
                    events: {
                        onhover: { enable: true, mode: 'grab' },
                        onclick: { enable: true, mode: 'push' },
                        resize: true
                    },
                    modes: {
                        grab: { distance: 140, line_linked: { opacity: 0.5 } },
                        push: { particles_nb: 4 }
                    }
                },
                retina_detect: true
            });

            // Enhanced Movie Search and Filter System
            class MovieSearchFilter {
                constructor() {
                    this.searchInput = document.getElementById('movieSearch');
                    this.searchClearBtn = document.getElementById('searchClearBtn');
                    this.searchSuggestions = document.getElementById('searchSuggestions');
                    this.searchIcon = document.querySelector('.search-icon');
                    this.movieItems = document.querySelectorAll('.movie-item');
                    this.filterButtons = document.querySelectorAll('.filter-btn');
                    this.noResults = document.getElementById('noResults');
                    
                    this.currentFilter = 'all';
                    this.currentSearchTerm = '';
                    this.searchTimeout = null;
                    
                    this.initializeGenreMapping();
                    this.initializeEventListeners();
                    this.updateFilterCounters();
                }

                initializeGenreMapping() {
                    this.genreMap = {
                        'all': ['tất cả'],
                        'action': ['action', 'hành động', 'hanh dong', 'hư\u00E0oE0nh \u0111\u1EE9ng', 'hành_động'],
                        'comedy': ['comedy', 'hài', 'hai', 'hài hước', 'hài_hước'],
                        'drama': ['drama', 'tâm lý', 'tam ly', 'chính kịch', 'tâm_lý'],
                        'horror': ['horror', 'kinh dị', 'kinh di', 'ma', 'zombie', 'kinh_dị'],
                        'romance': ['romance', 'lãng mạn', 'lang man', 'tình cảm', 'lãng_mạn', 'tình_cảm'],
                        'science fiction': ['science fiction', 'sci-fi', 'khoa học viễn tưởng', 'khoa hoc vien tuong', 'viễn tưởng', 'khoa_học_viễn_tưởng', 'kh\u00EAoa h\u1ECDc vi\u1EC5n t\u01B0\u1EDFng']
                    };
                    
                    // Thêm function để clean Unicode escape sequences
                    this.cleanUnicodeString = function(str) {
                        if (!str) return '';
                        return str.toLowerCase()
                                 .replace(/\\u[\dA-F]{4}/gi, function (match) {
                                     return String.fromCharCode(parseInt(match.replace(/\\u/g, ''), 16));
                                 })
                                 .replace(/[[\]"]/g, '')
                                 .replace(/,/g, ' ')
                                 .trim();
                    };
                }

                initializeEventListeners() {
                    // Search input events
                    this.searchInput.addEventListener('input', (e) => this.handleSearchInput(e));
                    this.searchInput.addEventListener('keypress', (e) => this.handleSearchKeypress(e));
                    this.searchInput.addEventListener('focus', () => this.handleSearchFocus());
                    this.searchInput.addEventListener('blur', () => this.handleSearchBlur());
                    
                    // Clear search button
                    this.searchClearBtn.addEventListener('click', () => this.clearSearch());
                    
                    // Filter buttons
                    this.filterButtons.forEach(button => {
                        button.addEventListener('click', (e) => this.handleFilterClick(e));
                    });
                    
                    // Click outside to close suggestions
                    document.addEventListener('click', (e) => {
                        if (!e.target.closest('.search-wrapper')) {
                            this.hideSuggestions();
                        }
                    });
                }

                handleSearchInput(e) {
                    const value = e.target.value.trim();
                    this.currentSearchTerm = value;
                    
                    // Show/hide clear button
                    this.searchClearBtn.style.display = value ? 'block' : 'none';
                    
                    // Debounced search
                    clearTimeout(this.searchTimeout);
                    this.searchTimeout = setTimeout(() => {
                        this.performSearch();
                        this.showSearchSuggestions(value);
                    }, 300);
                }

                handleSearchKeypress(e) {
                    if (e.key === 'Enter') {
                        this.performSearch();
                        this.hideSuggestions();
                    }
                }

                handleSearchFocus() {
                    this.searchInput.parentElement.classList.add('focused');
                    if (this.currentSearchTerm) {
                        this.showSearchSuggestions(this.currentSearchTerm);
                    }
                }

                handleSearchBlur() {
                    setTimeout(() => {
                        this.searchInput.parentElement.classList.remove('focused');
                    }, 200);
                }

                clearSearch() {
                    this.searchInput.value = '';
                    this.currentSearchTerm = '';
                    this.searchClearBtn.style.display = 'none';
                    this.hideSuggestions();
                    this.performSearch();
                    this.searchIcon.style.color = 'rgba(255, 255, 255, 0.7)';
                }

                showSearchSuggestions(term) {
                    if (!term || term.length < 2) {
                        this.hideSuggestions();
                        return;
                    }

                    const suggestions = this.generateSuggestions(term);
                    if (suggestions.length === 0) {
                        this.hideSuggestions();
                        return;
                    }

                    this.searchSuggestions.innerHTML = suggestions.map(suggestion => 
                        `<div class="suggestion-item" onclick="movieSearchFilter.selectSuggestion('${suggestion.text}')">
                            ${suggestion.text}
                            <span class="suggestion-type">${suggestion.type}</span>
                         </div>`
                    ).join('');

                    this.searchSuggestions.style.display = 'block';
                }

                generateSuggestions(term) {
                    const suggestions = new Set();
                    const termLower = this.cleanUnicodeString(term);

                    this.movieItems.forEach(item => {
                        const title = item.getAttribute('data-title');
                        const genres = this.cleanUnicodeString(item.getAttribute('data-genres'));
                        const cast = item.getAttribute('data-cast');
                        const director = item.getAttribute('data-director');

                        // Title suggestions
                        if (title.includes(termLower)) {
                            suggestions.add({ text: item.querySelector('.movie-title').textContent, type: 'Phim' });
                        }

                        // Genre suggestions
                        if (genres.includes(termLower)) {
                            // Parse và clean genres để hiển thị đẹp
                            try {
                                const rawGenres = item.getAttribute('data-genres');
                                const genreArray = rawGenres.split(',');
                                genreArray.forEach(genre => {
                                    const cleanGenre = this.cleanUnicodeString(genre.trim());
                                    if (cleanGenre.includes(termLower) && cleanGenre.length > 1) {
                                        suggestions.add({ text: cleanGenre, type: 'Thể loại' });
                                    }
                                });
                            } catch (e) {
                                console.log('Error parsing genres:', e);
                            }
                        }

                        // Cast suggestions
                        if (cast.includes(termLower)) {
                            const castList = cast.split(',');
                            castList.forEach(actor => {
                                if (actor.trim().includes(termLower)) {
                                    suggestions.add({ text: actor.trim(), type: 'Diễn viên' });
                                }
                            });
                        }

                        // Director suggestions
                        if (director.includes(termLower)) {
                            suggestions.add({ text: director, type: 'Đạo diễn' });
                        }
                    });

                    return Array.from(suggestions).slice(0, 5);
                }

                selectSuggestion(text) {
                    this.searchInput.value = text;
                    this.currentSearchTerm = text;
                    this.hideSuggestions();
                    this.performSearch();
                }

                hideSuggestions() {
                    this.searchSuggestions.style.display = 'none';
                }

                handleFilterClick(e) {
                    this.filterButtons.forEach(btn => btn.classList.remove('active'));
                    e.target.closest('.filter-btn').classList.add('active');
                    
                    this.currentFilter = e.target.closest('.filter-btn').getAttribute('data-filter');
                    this.performSearch();
                }

                performSearch() {
                    let visibleCount = 0;
                    const searchTerm = this.currentSearchTerm.toLowerCase();

                    this.movieItems.forEach(item => {
                        const isVisible = this.isMovieMatch(item, searchTerm, this.currentFilter);
                        
                        if (isVisible) {
                            this.showMovie(item);
                            visibleCount++;
                        } else {
                            this.hideMovie(item);
                        }
                    });

                    // Update UI based on results
                    this.updateSearchResults(visibleCount);
                    this.updateFilterCounters();
                }

                isMovieMatch(item, searchTerm, filter) {
                    // Check filter match
                    if (filter !== 'all') {
                        const genres = this.cleanUnicodeString(item.getAttribute('data-genres'));
                        const filterTerms = this.genreMap[filter] || [filter];
                        const genreMatch = filterTerms.some(term => {
                            const cleanTerm = this.cleanUnicodeString(term);
                            return genres.includes(cleanTerm) || cleanTerm.includes(genres);
                        });
                        
                        if (!genreMatch) return false;
                    }

                    // Check search term match
                    if (searchTerm) {
                        const title = item.getAttribute('data-title');
                        const genres = this.cleanUnicodeString(item.getAttribute('data-genres'));
                        const overview = item.getAttribute('data-overview');
                        const cast = item.getAttribute('data-cast');
                        const director = item.getAttribute('data-director');
                        const cleanSearchTerm = this.cleanUnicodeString(searchTerm);

                        return title.includes(searchTerm) ||
                               genres.includes(cleanSearchTerm) ||
                               overview.includes(searchTerm) ||
                               cast.includes(searchTerm) ||
                               director.includes(searchTerm) ||
                               cleanSearchTerm.includes(title) ||
                               searchTerm.includes(genres);
                    }

                    return true;
                }

                showMovie(item) {
                    item.style.display = '';
                    item.classList.add('animate__animated', 'animate__fadeIn');
                    setTimeout(() => {
                        item.classList.remove('animate__animated', 'animate__fadeIn');
                    }, 600);
                }

                hideMovie(item) {
                    item.style.display = 'none';
                    item.classList.remove('animate__animated', 'animate__fadeIn');
                }

                updateSearchResults(visibleCount) {
                    if (visibleCount === 0) {
                        this.noResults.style.display = 'block';
                        this.searchIcon.style.color = '#ff6b6b';
                    } else {
                        this.noResults.style.display = 'none';
                        this.searchIcon.style.color = this.currentSearchTerm ? 
                            'rgba(40, 167, 69, 0.8)' : 'rgba(255, 255, 255, 0.7)';
                    }
                }

                updateFilterCounters() {
                    // Count movies for each filter
                    const counts = {};
                    
                    this.filterButtons.forEach(button => {
                        const filter = button.getAttribute('data-filter');
                        counts[filter] = 0;
                        
                        this.movieItems.forEach(item => {
                            if (filter === 'all' || this.isMovieMatch(item, '', filter)) {
                                counts[filter]++;
                            }
                        });

                        // Update counter display
                        const counter = button.querySelector('.filter-counter');
                        if (counter) {
                            if (counts[filter] > 0 && filter !== 'all') {
                                counter.textContent = counts[filter];
                                counter.style.display = 'flex';
                            } else {
                                counter.style.display = 'none';
                            }
                        }
                    });
                }
            }

            // Initialize the search and filter system
            window.movieSearchFilter = new MovieSearchFilter();
        });
    </script>
}

